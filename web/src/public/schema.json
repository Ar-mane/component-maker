{
  "description": "Configuration interface for a tool that utilizes templates for various operations.",
  "type": "object",
  "properties": {
    "dir": {
      "description": "The folder where templates are stored. Default is '.cm_templates'.",
      "type": "string"
    },
    "templates": {
      "description": "List of templates to be used for operations.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Template"
      }
    }
  },
  "required": [
    "dir",
    "templates"
  ],
  "definitions": {
    "Template": {
      "description": "Interface representing a template for operations.",
      "type": "object",
      "properties": {
        "label": {
          "description": "Template label for display purposes.",
          "type": "string"
        },
        "detail": {
          "description": "Template details for additional information.",
          "type": "string"
        },
        "templateDir": {
          "description": "Directory name inside the template directory. Example: '.cm_templates/component' ==> D = 'component'.",
          "type": "string"
        },
        "variable": {
          "description": "Variable interpolation: It can be a directory name, a file name, or content in a file.\nIt is replaced by user input during the operation.",
          "type": "string"
        },
        "destinationDir": {
          "description": "Template destination directory. Some templates may require a specific directory.\nProvide a directory if needed (optional). If absent, the default directory is the directory clicked.",
          "type": "string"
        },
        "files": {
          "description": "If there are multiple destinations, provide a destination for each file (optional).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpecialFile"
          }
        },
        "effects": {
          "description": "File effects, such as post-updating a file.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Effect"
          }
        }
      },
      "required": [
        "detail",
        "label",
        "templateDir",
        "variable"
      ]
    },
    "SpecialFile": {
      "description": "Interface representing a file affected by the template operation.",
      "type": "object",
      "properties": {
        "sourceFile": {
          "description": "Filename source, relative path. Example: `.templates/page/__componentName__.ext`, fileName: `__componentName__.ext`.",
          "type": "string"
        },
        "destinationDir": {
          "description": "directory destination, absolute path starting from your workspace root.\nExample: `src/pages`.",
          "type": "string"
        }
      },
      "required": [
        "destinationDir",
        "sourceFile"
      ]
    },
    "Effect": {
      "description": "Interface representing an effect to be applied after the template operation on files.",
      "type": "object",
      "properties": {
        "file": {
          "description": "Filename to update, absolute path starting from your workspace root.\nExample: `src/service/dependency-injection.ext`.",
          "type": "string"
        },
        "action": {
          "description": "Action to apply, like edit.",
          "type": "string",
          "const": "edit"
        },
        "concat": {
          "description": "Edit strategy: start | end. Append a line at the start or the end of the file.",
          "enum": [
            "end",
            "start"
          ],
          "type": "string"
        },
        "content": {
          "description": "Content to add during the edit action.\nExample : content = '// serviceRegister.singleton(new _ComponentName_Service())'",
          "type": "string"
        }
      },
      "required": [
        "action",
        "concat",
        "content",
        "file"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#"
}